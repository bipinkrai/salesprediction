#data
TV,Radio,Newspaper,Sales
230.1,37.8,69.2,22.1
44.5,39.3,45.1,10.4
17.2,45.9,69.3,9.3
151.5,41.3,58.5,18.5
180.8,10.8,58.4,12.9
120.2,20.3,39.1,14.5
200.0,35.1,65.2,21.4
99.3,15.2,31.5,11.2
65.1,22.4,20.3,9.7
145.3,18.6,45.7,14.3
90.2,32.3,56.1,13.1
188.1,12.9,25.6,14.9
176.5,24.7,40.3,17.0
122.0,15.9,35.2,13.2
234.3,30.1,55.1,21.7
199.9,44.5,39.5,20.9
134.7,20.9,31.5,15.6
89.4,9.3,26.4,9.4
201.5,25.6,67.4,19.7
187.3,35.4,42.9,20.4
120.0,25.0,55.0,14.2
137.9,38.2,30.2,17.3
171.2,29.3,43.1,18.9
232.1,41.0,60.5,22.4
210.9,36.4,45.2,21.3
95.5,10.9,23.2,10.6
65.8,12.4,15.6,8.4
78.2,18.1,22.4,9.3
203.5,34.6,49.9,20.5
162.9,24.8,28.7,17.8
118.7,19.4,37.2,13.5
88.2,14.9,26.3,10.1
222.1,32.4,48.7,21.6
149.5,30.2,37.4,17.2
102.3,17.5,28.9,11.6
87.4,20.6,32.1,10.3
250.5,40.3,60.4,24.2
213.1,37.1,55.5,22.3
123.2,18.3,40.2,13.9
176.3,29.4,43.9,18.4
191.5,28.1,48.0,19.8
97.5,11.4,26.6,10.2
85.0,15.2,20.3,9.0
179.2,31.4,42.1,18.6
110.0,22.5,30.2,12.1
225.3,34.2,54.3,21.5
132.6,27.5,35.5,15.0
115.1,20.7,27.9,12.4
205.7,33.1,44.7,20.0
189.2,36.9,49.3,20.7
124.0,21.4,33.1,13.7
212.3,30.8,51.3,21.1
160.0,27.0,36.8,16.9
175.0,35.0,40.0,18.8
98.0,12.0,20.0,10.0
107.3,15.1,23.2,11.2
195.1,38.2,45.1,20.2
82.4,10.4,19.8,8.9
72.0,9.0,16.3,8.0
163.3,28.4,32.4,17.5
142.2,25.5,30.5,15.8
118.0,13.5,27.5,12.0
184.3,39.4,48.8,19.6
123.0,21.0,29.0,13.4
136.0,24.5,32.5,15.1
201.2,30.3,50.2,20.3
147.8,26.6,36.0,16.4
108.5,14.6,25.3,11.5
193.1,29.0,47.1,19.9
175.4,33.2,41.0,18.7
84.6,12.3,20.2,9.2
160.1,31.4,38.6,17.6
220.2,42.0,61.0,22.7
138.0,20.0,34.1,15.2
117.4,19.1,28.4,12.6
153.3,24.2,35.7,16.5
100.0,16.5,22.0,11.0
183.2,28.3,43.3,18.9
210.1,39.2,53.2,21.8
123.3,25.3,31.1,13.8
104.1,14.4,26.4,11.1
115.2,23.2,29.4,12.5
187.1,30.5,46.2,19.5
173.5,36.0,39.5,18.3
98.2,17.2,23.5,10.4
126.3,18.2,28.9,13.0
200.3,33.3,52.0,20.6
110.4,15.4,25.0,11.7
142.0,29.1,35.0,15.9
154.1,22.3,32.1,16.1
184.0,34.5,45.5,19.1
199.5,37.2,49.6,20.8
112.6,17.1,24.9,11.9
168.0,30.0,40.1,17.4
105.3,13.2,23.1,10.9
180.4,31.7,44.8,18.5
220.0,39.3,58.4,22.2
130.1,20.1,31.5,14.7
165.2,26.7,37.4,17.0
190.8,34.8,48.3,20.1


---------------------------------------------------------------------------------------------------------------------------------------------------------------------

app.py

import pickle
import numpy as np
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

with open("model.pkl", "rb") as f:
    model = pickle.load(f)

class InputData(BaseModel):
    TV: float
    Radio: float
    Newspaper: float

@app.get("/")
def read_root():
    return {"message": "ML Model API is up!"}

@app.post("/predict/")
def predict(data: InputData):
    features = np.array([[data.TV, data.Radio, data.Newspaper]])
    prediction = model.predict(features)
    return {"predicted_sales": prediction[0]}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Dockerfile

FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

RUN python train_model.py

EXPOSE 8000
CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]


---------------------------------------------------------------------------------------------------------------------------------------------------------------------

requirements.txt

fastapi==0.111.0
uvicorn==0.29.0
scikit-learn==1.4.1.post1
pandas==2.2.2
numpy==1.26.4

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
train_model.py

import pandas as pd
import pickle
from sklearn.linear_model import LinearRegression

data = pd.read_csv("data/advertising.csv")
X = data[["TV", "Radio", "Newspaper"]]
y = data["Sales"]

model = LinearRegression()
model.fit(X, y)

with open("model.pkl", "wb") as f:
    pickle.dump(model, f)

print("Model trained and saved to model and deploy to github.pkl")


---------------------------------------------------------------------------------------------------------------------------------------------------------------------


.gitignore
/venvname
__pycache__/
*.pyc
*.pyo
*.pyd
.env
*.env
*.sqlite3
*.log

---------------------------------------------------------------------------------------------------------------------------------------------------------------------



ci.yml

name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:

jobs:
  train-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Training Script
        run: python train_model.py

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

cd.yml

name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mlops-sales:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/mlops-sales:latest


---------------------------------------------------------------------------------------------------------------------------------------------------------------------

deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlops-sales-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mlops-sales
  template:
    metadata:
      labels:
        app: mlops-sales
    spec:
      containers:
      - name: mlops-sales-container
        image: dineshjothiram/mlops-sales:latest
        ports:
        - containerPort: 8000

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
service.yaml

apiVersion: v1
kind: Service
metadata:
  name: mlops-sales-service
spec:
  type: NodePort
  selector:
    app: mlops-sales
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
      nodePort: 30080  # You can access it via localhost:30080

---------------------------------------------------------------------------------------------------------------------------------------------------------------------






